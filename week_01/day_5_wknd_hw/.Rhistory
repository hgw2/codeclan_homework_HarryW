.default      = "foreign_language"
)
)
books_cleaned_lang <- books_cleaned_lang %>%
rename(language = language_code)
books_cleaned_lang %>%
group_by(language) %>%
summarise(count = n())
eng_books <- books_cleaned_lang %>%
filter(language == "middle_english" | language == "english")
eng_books %>%
distinct(publisher) %>%
arrange(publisher)
eng_books %>%
group_by(publisher) %>%
summarise(count = n()) %>%
arrange(publisher)
books_pub_count <- eng_books %>%
group_by(publisher) %>%
mutate(publisher_count = n()) %>%
ungroup()
books_cleaned_pub <- books_pub_count %>%
mutate(
publisher = case_when(
publisher_count < 15 ~ "Small Publisher",
TRUE ~ publisher
)
) %>%
select(-publisher_count)
books_cleaned_pub %>%
group_by(publisher) %>%
summarise(count = n()) %>%
arrange(desc(count))
library(tidyverse)
library(janitor)
books <- read_csv("data/books.csv")
head(books)
names(books)
dim(books)
books_subset <- books %>%
select(-bookID, -isbn, -isbn13, -publication_date)
head(books_subset)
books_subset %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_subset %>%
mutate(across(where(is.numeric), ~ if_else(.x == 0, TRUE, FALSE))) %>%
select(is.logical) %>%
summarise(across(.fns = ~ sum(.x, na.rm = TRUE)))
books_nul_removed <- books_subset %>%
mutate(across(where(is.numeric), ~ na_if(.x, 0)))
# Check no. of NA values
books_nul_removed %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_cleaned <- books_nul_removed %>%
mutate(
authors = coalesce(authors, "unavailable"),
language_code = coalesce(language_code, "unavailable"),
publisher = coalesce(publisher, "unavailable")
)
books_cleaned <- books_cleaned %>%
mutate(
average_rating =
coalesce(average_rating, median(average_rating, na.rm = TRUE)),
num_pages =
coalesce(num_pages, median(num_pages, na.rm = TRUE))
)
books_cleaned %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_cleaned <- books_cleaned %>%
mutate(
ratings_count = coalesce(ratings_count, median(ratings_count, na.rm = TRUE)),
text_reviews_count = coalesce(text_reviews_count, 0)
)
books_cleaned %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_cleaned <- books_cleaned %>%
mutate(total_reviews = ratings_count + text_reviews_count) %>%
select(-ratings_count, -text_reviews_count)
books_cleaned %>%
distinct(language_code) %>%
arrange(language_code)
books_cleaned <- books_cleaned %>%
mutate(language_code = recode(language_code,
"9780674842113" = "unavailable",
"9780851742717" = "unavailable"
))
books_cleaned_lang <- books_cleaned %>%
mutate(
language_code = recode(language_code,
"en-CA"       = "english",
"en-GB"       = "english",
"en-US"       = "english",
"eng"         = "english",
"enm"         = "middle_english",
"unavailable" = "unavailable",
.default      = "foreign_language"
)
)
books_cleaned_lang <- books_cleaned_lang %>%
rename(language = language_code)
books_cleaned_lang %>%
group_by(language) %>%
summarise(count = n())
eng_books <- books_cleaned_lang %>%
filter(language == "middle_english" | language == "english")
eng_books %>%
distinct(publisher) %>%
arrange(publisher)
eng_books %>%
group_by(publisher) %>%
summarise(count = n()) %>%
arrange(publisher)
books_pub_count <- eng_books %>%
group_by(publisher) %>%
mutate(publisher_count = n()) %>%
ungroup()
books_cleaned_pub <- books_pub_count %>%
mutate(
publisher = case_when(
publisher_count < 15 ~ "Small Publisher",
TRUE ~ publisher
)
) %>%
select(-publisher_count)
books_cleaned_pub %>%
group_by(publisher) %>%
summarise(count = n()) %>%
arrange(desc(count))
books_cleaned_pub %>%
select(title, average_rating, total_reviews) %>%
arrange(desc(average_rating)) %>%
head(10)
books_total_scores <- books_cleaned_pub %>%
mutate(total_score = average_rating * total_reviews)
books_total_scores %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
books_total_scores %>%
group_by(authors) %>%
summarise(avg_total_score = mean(total_score)) %>%
slice_max(avg_total_score, n = 10)
books_total_scores %>%
group_by(publisher) %>%
summarise(avg_total_score = mean(total_score)) %>%
slice_max(avg_total_score, n = 10)
read_time_book <- books_total_scores %>%
mutate(estimated_read_time = (num_pages * 3) / 60)
read_time_book
read_time_book %>%
select(title, num_pages) %>%
arrange(num_pages) %>%
head(10)
read_time_book %>%
select(title, estimated_read_time) %>%
arrange(estimated_read_time) %>%
head(10)
read_categories <- read_time_book %>%
mutate(
time_category = case_when(
estimated_read_time < 10 ~ "Quick Read",
estimated_read_time < 50 ~ "Long Read",
estimated_read_time >= 50 ~ "Epic Read"
)
)
read_categories %>%
group_by(time_category) %>%
summarise(total = n())
read_categories %>%
filter(time_category == "Quick Read") %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
read_categories %>%
filter(time_category == "Long Read") %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
read_categories %>%
filter(time_category == "Epic Read") %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
own_categories <- read_categories %>%
mutate(
own_category = case_when(
total_score < 1e5 ~ "Avoid",
total_score < 5e5 ~ "Library filler",
total_score < 2e6 ~ "Nice to have",
total_score >= 2e6 ~ "Must own"
)
)
own_categories %>%
group_by(own_category) %>%
summarise(total = n())
must_own <- own_categories %>%
filter(own_category == "Must own") %>%
select(title, authors)
must_own
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = 200 - 62)
nice_to_have
random_library <- rbind(must_own, nice_to_have) %>%
arrange(title)
random_library
## Holiday reading list
Say I was going on holiday and wanted to select 5 books to take with me, they must be quick to read and enoyable.
holiday_books <- own_categories %>%
filter(
own_category == "Must own" | own_category == "Nice to have",
time_category == "Quick Read"
) %>%
sample_n(5) %>%
select(title) %>%
pull(title)
holiday_books
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = length(must_own) - 62)
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = (length(must_own) - 62))
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = (length(must_own) - 62))
library(tidyverse)
library(janitor)
books <- read_csv("data/books.csv")
head(books)
names(books)
dim(books)
books_subset <- books %>%
select(-bookID, -isbn, -isbn13, -publication_date)
head(books_subset)
books_subset %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_subset %>%
mutate(across(where(is.numeric), ~ if_else(.x == 0, TRUE, FALSE))) %>%
select(is.logical) %>%
summarise(across(.fns = ~ sum(.x, na.rm = TRUE)))
books_nul_removed <- books_subset %>%
mutate(across(where(is.numeric), ~ na_if(.x, 0)))
# Check no. of NA values
books_nul_removed %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_cleaned <- books_nul_removed %>%
mutate(
authors = coalesce(authors, "unavailable"),
language_code = coalesce(language_code, "unavailable"),
publisher = coalesce(publisher, "unavailable")
)
books_cleaned <- books_cleaned %>%
mutate(
average_rating =
coalesce(average_rating, median(average_rating, na.rm = TRUE)),
num_pages =
coalesce(num_pages, median(num_pages, na.rm = TRUE))
)
books_cleaned %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_cleaned <- books_cleaned %>%
mutate(
ratings_count = coalesce(ratings_count, median(ratings_count, na.rm = TRUE)),
text_reviews_count = coalesce(text_reviews_count, 0)
)
books_cleaned %>%
summarise(across(.fns = ~ sum(is.na(.x))))
books_cleaned <- books_cleaned %>%
mutate(total_reviews = ratings_count + text_reviews_count) %>%
select(-ratings_count, -text_reviews_count)
books_cleaned %>%
distinct(language_code) %>%
arrange(language_code)
books_cleaned <- books_cleaned %>%
mutate(language_code = recode(language_code,
"9780674842113" = "unavailable",
"9780851742717" = "unavailable"
))
books_cleaned_lang <- books_cleaned %>%
mutate(
language_code = recode(language_code,
"en-CA"       = "english",
"en-GB"       = "english",
"en-US"       = "english",
"eng"         = "english",
"enm"         = "middle_english",
"unavailable" = "unavailable",
.default      = "foreign_language"
)
)
books_cleaned_lang <- books_cleaned_lang %>%
rename(language = language_code)
books_cleaned_lang %>%
group_by(language) %>%
summarise(count = n())
eng_books <- books_cleaned_lang %>%
filter(language == "middle_english" | language == "english")
eng_books %>%
distinct(publisher) %>%
arrange(publisher)
eng_books %>%
group_by(publisher) %>%
summarise(count = n()) %>%
arrange(publisher)
books_pub_count <- eng_books %>%
group_by(publisher) %>%
mutate(publisher_count = n()) %>%
ungroup()
books_cleaned_pub <- books_pub_count %>%
mutate(
publisher = case_when(
publisher_count < 15 ~ "Small Publisher",
TRUE ~ publisher
)
) %>%
select(-publisher_count)
books_cleaned_pub %>%
group_by(publisher) %>%
summarise(count = n()) %>%
arrange(desc(count))
books_cleaned_pub %>%
select(title, average_rating, total_reviews) %>%
arrange(desc(average_rating)) %>%
head(10)
books_total_scores <- books_cleaned_pub %>%
mutate(total_score = average_rating * total_reviews)
books_total_scores %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
books_total_scores %>%
group_by(authors) %>%
summarise(avg_total_score = mean(total_score)) %>%
slice_max(avg_total_score, n = 10)
books_total_scores %>%
group_by(publisher) %>%
summarise(avg_total_score = mean(total_score)) %>%
slice_max(avg_total_score, n = 10)
read_time_book <- books_total_scores %>%
mutate(estimated_read_time = (num_pages * 3) / 60)
read_time_book
read_time_book %>%
select(title, num_pages) %>%
arrange(num_pages) %>%
head(10)
read_time_book %>%
select(title, estimated_read_time) %>%
arrange(estimated_read_time) %>%
head(10)
read_categories <- read_time_book %>%
mutate(
time_category = case_when(
estimated_read_time < 10 ~ "Quick Read",
estimated_read_time < 50 ~ "Long Read",
estimated_read_time >= 50 ~ "Epic Read"
)
)
read_categories %>%
group_by(time_category) %>%
summarise(total = n())
read_categories %>%
filter(time_category == "Quick Read") %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
read_categories %>%
filter(time_category == "Long Read") %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
read_categories %>%
filter(time_category == "Epic Read") %>%
select(title, total_score) %>%
arrange(desc(total_score)) %>%
head(10)
own_categories <- read_categories %>%
mutate(
own_category = case_when(
total_score < 1e5 ~ "Avoid",
total_score < 5e5 ~ "Library filler",
total_score < 2e6 ~ "Nice to have",
total_score >= 2e6 ~ "Must own"
)
)
own_categories %>%
group_by(own_category) %>%
summarise(total = n())
must_own <- own_categories %>%
filter(own_category == "Must own") %>%
select(title, authors)
must_own
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = (length(must_own) - 62))
?length
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = (length(must_own$title) - 62))
nice_to_have
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = (length(must_own$title) - 62))
nice_to_have
(length(must_own$title)
length(must_own$title)
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = (length(must_own$authors) - 62))
nice_to_have
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = nrow(must_own) - 62))
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = nrow(must_own) - 62)
nice_to_have
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = nrow(must_own) - 62)
nice_to_have
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = 200 - length(must_own))
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = 200 - length(must_own$title))
nice_to_have
sample_n(size = 200 - nrow(must_own)
nice_to_have <- own_categories %>%
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = 200 - nrow(must_own))
nice_to_have
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = 200 - nrow(must_own))
nice_to_have
holiday_books <- own_categories %>%
filter(
own_category == "Must own" | own_category == "Nice to have",
time_category == "Quick Read"
) %>%
sample_n(5) %>%
select(title) %>%
pull(title)
holiday_books
books_cleaned_pub %>%
select(title, average_rating, total_reviews) %>%
arrange(desc(average_rating)) %>%
head(10)
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = 200 - nrow(must_own))
nice_to_have
nice_to_have <- own_categories %>%
filter(own_category == "Nice to have") %>%
select(title, authors) %>%
sample_n(size = 200 - nrow(must_own))
nice_to_have
holiday_books <- own_categories %>%
filter(
own_category == "Must own" | own_category == "Nice to have",
time_category == "Quick Read"
) %>%
sample_n(5) %>%
select(title) %>%
pull(title)
holiday_books
holiday_books <- own_categories %>%
filter(
own_category == "Must own" | own_category == "Nice to have",
time_category == "Quick Read"
) %>%
sample_n(5) %>%
select(title) %>%
pull(title)
holiday_books
holiday_books <- own_categories %>%
filter(
own_category == "Must own" | own_category == "Nice to have",
time_category == "Quick Read"
) %>%
sample_n(5) %>%
select(title) %>%
pull(title)
holiday_books
holiday_books <- own_categories %>%
filter(
own_category == "Must own" | own_category == "Nice to have",
time_category == "Quick Read"
) %>%
sample_n(5) %>%
select(title) %>%
pull(title)
holiday_books
